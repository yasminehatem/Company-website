{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\Project\\\\frontend\\\\src\\\\form.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport { Form, Input, Tooltip, Icon, Cascader, Select, Row, Col, Checkbox, Button, AutoComplete } from 'antd';\nconst Option = Select.Option;\nconst AutoCompleteOption = AutoComplete.Option;\nconst formTailLayout = {\n  labelCol: {\n    span: 4\n  },\n  wrapperCol: {\n    span: 8,\n    offset: 4\n  }\n};\nconst departments = [{\n  value: 'Department1',\n  label: 'Department1',\n  children: [{\n    value: 'Title1',\n    label: 'Title1'\n  }]\n}, {\n  value: 'Department2',\n  label: 'Department2',\n  children: [{\n    value: 'Title2',\n    label: 'Title2'\n  }]\n}];\n\nclass RegistrationForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      confirmDirty: false,\n      autoCompleteResult: []\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFieldsAndScroll((err, values) => {\n        if (!err) {\n          console.log('Received values of form: ', values);\n        }\n      });\n    };\n\n    this.handleConfirmBlur = e => {\n      const value = e.target.value;\n      this.setState({\n        confirmDirty: this.state.confirmDirty || !!value\n      });\n    };\n\n    this.compareToFirstPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && value !== form.getFieldValue('password')) {\n        callback('Two passwords that you enter is inconsistent!');\n      } else {\n        callback();\n      }\n    };\n\n    this.validateToNextPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && this.state.confirmDirty) {\n        form.validateFields(['confirm'], {\n          force: true\n        });\n      }\n\n      callback();\n    };\n\n    this.handleWebsiteChange = value => {\n      let autoCompleteResult;\n\n      if (!value) {\n        autoCompleteResult = [];\n      } else {\n        autoCompleteResult = ['.com', '.org', '.net'].map(domain => \"\".concat(value).concat(domain));\n      }\n\n      this.setState({\n        autoCompleteResult\n      });\n    };\n  }\n\n  render() {\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    const autoCompleteResult = this.state.autoCompleteResult;\n    const formItemLayout = {\n      labelCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 8\n        }\n      },\n      wrapperCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 16\n        }\n      }\n    };\n    const tailFormItemLayout = {\n      wrapperCol: {\n        xs: {\n          span: 24,\n          offset: 0\n        },\n        sm: {\n          span: 16,\n          offset: 8\n        }\n      }\n    };\n    const prefixSelector = getFieldDecorator('prefix', {\n      initialValue: '86'\n    })(React.createElement(Select, {\n      style: {\n        width: 70\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(Option, {\n      value: \"86\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"+86\"), React.createElement(Option, {\n      value: \"87\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"+87\")));\n    const websiteOptions = autoCompleteResult.map(website => React.createElement(AutoCompleteOption, {\n      key: website,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, website));\n    return React.createElement(Form, Object.assign({}, formItemLayout, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }), React.createElement(Form.Item, {\n      label: \"E-mail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, getFieldDecorator('email', {\n      rules: [{\n        type: 'email',\n        message: 'The input is not valid E-mail!'\n      }, {\n        required: true,\n        message: 'Please input your E-mail!'\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Password\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, getFieldDecorator('password', {\n      rules: [{\n        required: true,\n        message: 'Please input your password!'\n      }, {\n        validator: this.validateToNextPassword\n      }]\n    })(React.createElement(Input.Password, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Confirm Password\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, getFieldDecorator('confirm', {\n      rules: [{\n        required: true,\n        message: 'Please confirm your password!'\n      }, {\n        validator: this.compareToFirstPassword\n      }]\n    })(React.createElement(Input.Password, {\n      onBlur: this.handleConfirmBlur,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, \"Nickname\\xA0\", React.createElement(Tooltip, {\n        title: \"What do you want others to call you?\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        type: \"question-circle-o\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }))),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, getFieldDecorator('nickname', {\n      rules: [{\n        required: true,\n        message: 'Please input your nickname!',\n        whitespace: true\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Habitual Residence\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, getFieldDecorator('residence', {\n      initialValue: ['zhejiang', 'hangzhou', 'xihu'],\n      rules: [{\n        type: 'array',\n        required: true,\n        message: 'Please select your habitual residence!'\n      }]\n    })(React.createElement(Cascader, {\n      options: residences,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Phone Number\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, getFieldDecorator('phone', {\n      rules: [{\n        required: true,\n        message: 'Please input your phone number!'\n      }]\n    })(React.createElement(Input, {\n      addonBefore: prefixSelector,\n      style: {\n        width: '100%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Website\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, getFieldDecorator('website', {\n      rules: [{\n        required: true,\n        message: 'Please input website!'\n      }]\n    })(React.createElement(AutoComplete, {\n      dataSource: websiteOptions,\n      onChange: this.handleWebsiteChange,\n      placeholder: \"website\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    })))), React.createElement(Form.Item, {\n      label: \"Captcha\",\n      extra: \"We must make sure that your are a human.\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, React.createElement(Row, {\n      gutter: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, React.createElement(Col, {\n      span: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, getFieldDecorator('captcha', {\n      rules: [{\n        required: true,\n        message: 'Please input the captcha you got!'\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }))), React.createElement(Col, {\n      span: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, React.createElement(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, \"Get captcha\")))), React.createElement(Form.Item, Object.assign({}, tailFormItemLayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }), getFieldDecorator('agreement', {\n      valuePropName: 'checked'\n    })(React.createElement(Checkbox, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, \"I have read the \", React.createElement(\"a\", {\n      href: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, \"agreement\")))), React.createElement(Form.Item, Object.assign({}, tailFormItemLayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, \"Register\")));\n  }\n\n} // const WrappedRegistrationForm = Form.create({ name: 'register' })(RegistrationForm);\n//\n// ReactDOM.render(<WrappedRegistrationForm />, document.getElementById('container'));\n\n\nexport default RegistrationForm;","map":{"version":3,"sources":["C:\\Users\\User\\Desktop\\Project\\frontend\\src\\form.js"],"names":["React","ReactDOM","Form","Input","Tooltip","Icon","Cascader","Select","Row","Col","Checkbox","Button","AutoComplete","Option","AutoCompleteOption","formTailLayout","labelCol","span","wrapperCol","offset","departments","value","label","children","RegistrationForm","Component","state","confirmDirty","autoCompleteResult","handleSubmit","e","preventDefault","props","form","validateFieldsAndScroll","err","values","console","log","handleConfirmBlur","target","setState","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","validateFields","force","handleWebsiteChange","map","domain","render","getFieldDecorator","formItemLayout","xs","sm","tailFormItemLayout","prefixSelector","initialValue","width","websiteOptions","website","rules","type","message","required","validator","whitespace","residences","valuePropName"],"mappings":"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","sourcesContent":["\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'antd/dist/antd.css';\r\nimport './index.css';\r\nimport {\r\n    Form,\r\n    Input,\r\n    Tooltip,\r\n    Icon,\r\n    Cascader,\r\n    Select,\r\n    Row,\r\n    Col,\r\n    Checkbox,\r\n    Button,\r\n    AutoComplete,\r\n} from 'antd';\r\n\r\nconst { Option } = Select;\r\nconst AutoCompleteOption = AutoComplete.Option;\r\n\r\nconst formTailLayout = {\r\n    labelCol: { span: 4 },\r\n    wrapperCol: { span: 8, offset: 4 },\r\n};\r\n\r\n\r\nconst departments = [\r\n    {\r\n        value: 'Department1',\r\n        label: 'Department1',\r\n        children: [\r\n            {\r\n                value: 'Title1',\r\n                label: 'Title1',\r\n\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        value: 'Department2',\r\n        label: 'Department2',\r\n        children: [\r\n            {\r\n                value: 'Title2',\r\n                label: 'Title2',\r\n\r\n            },\r\n        ],\r\n    },\r\n];\r\n\r\nclass RegistrationForm extends React.Component {\r\n    state = {\r\n        confirmDirty: false,\r\n        autoCompleteResult: [],\r\n    };\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.form.validateFieldsAndScroll((err, values) => {\r\n            if (!err) {\r\n                console.log('Received values of form: ', values);\r\n            }\r\n        });\r\n    };\r\n\r\n    handleConfirmBlur = e => {\r\n        const { value } = e.target;\r\n        this.setState({ confirmDirty: this.state.confirmDirty || !!value });\r\n    };\r\n\r\n    compareToFirstPassword = (rule, value, callback) => {\r\n        const { form } = this.props;\r\n        if (value && value !== form.getFieldValue('password')) {\r\n            callback('Two passwords that you enter is inconsistent!');\r\n        } else {\r\n            callback();\r\n        }\r\n    };\r\n\r\n    validateToNextPassword = (rule, value, callback) => {\r\n        const { form } = this.props;\r\n        if (value && this.state.confirmDirty) {\r\n            form.validateFields(['confirm'], { force: true });\r\n        }\r\n        callback();\r\n    };\r\n\r\n    handleWebsiteChange = value => {\r\n        let autoCompleteResult;\r\n        if (!value) {\r\n            autoCompleteResult = [];\r\n        } else {\r\n            autoCompleteResult = ['.com', '.org', '.net'].map(domain => `${value}${domain}`);\r\n        }\r\n        this.setState({ autoCompleteResult });\r\n    };\r\n\r\n    render() {\r\n        const { getFieldDecorator } = this.props.form;\r\n        const { autoCompleteResult } = this.state;\r\n\r\n        const formItemLayout = {\r\n            labelCol: {\r\n                xs: { span: 24 },\r\n                sm: { span: 8 },\r\n            },\r\n            wrapperCol: {\r\n                xs: { span: 24 },\r\n                sm: { span: 16 },\r\n            },\r\n        };\r\n        const tailFormItemLayout = {\r\n            wrapperCol: {\r\n                xs: {\r\n                    span: 24,\r\n                    offset: 0,\r\n                },\r\n                sm: {\r\n                    span: 16,\r\n                    offset: 8,\r\n                },\r\n            },\r\n        };\r\n        const prefixSelector = getFieldDecorator('prefix', {\r\n            initialValue: '86',\r\n        })(\r\n            <Select style={{ width: 70 }}>\r\n                <Option value=\"86\">+86</Option>\r\n                <Option value=\"87\">+87</Option>\r\n            </Select>,\r\n        );\r\n\r\n        const websiteOptions = autoCompleteResult.map(website => (\r\n            <AutoCompleteOption key={website}>{website}</AutoCompleteOption>\r\n        ));\r\n\r\n        return (\r\n            <Form {...formItemLayout} onSubmit={this.handleSubmit}>\r\n                <Form.Item label=\"E-mail\">\r\n                    {getFieldDecorator('email', {\r\n                        rules: [\r\n                            {\r\n                                type: 'email',\r\n                                message: 'The input is not valid E-mail!',\r\n                            },\r\n                            {\r\n                                required: true,\r\n                                message: 'Please input your E-mail!',\r\n                            },\r\n                        ],\r\n                    })(<Input />)}\r\n                </Form.Item>\r\n                <Form.Item label=\"Password\" hasFeedback>\r\n                    {getFieldDecorator('password', {\r\n                        rules: [\r\n                            {\r\n                                required: true,\r\n                                message: 'Please input your password!',\r\n                            },\r\n                            {\r\n                                validator: this.validateToNextPassword,\r\n                            },\r\n                        ],\r\n                    })(<Input.Password />)}\r\n                </Form.Item>\r\n                <Form.Item label=\"Confirm Password\" hasFeedback>\r\n                    {getFieldDecorator('confirm', {\r\n                        rules: [\r\n                            {\r\n                                required: true,\r\n                                message: 'Please confirm your password!',\r\n                            },\r\n                            {\r\n                                validator: this.compareToFirstPassword,\r\n                            },\r\n                        ],\r\n                    })(<Input.Password onBlur={this.handleConfirmBlur} />)}\r\n                </Form.Item>\r\n                <Form.Item\r\n                    label={\r\n                        <span>\r\n              Nickname&nbsp;\r\n                            <Tooltip title=\"What do you want others to call you?\">\r\n                <Icon type=\"question-circle-o\" />\r\n              </Tooltip>\r\n            </span>\r\n                    }\r\n                >\r\n                    {getFieldDecorator('nickname', {\r\n                        rules: [{ required: true, message: 'Please input your nickname!', whitespace: true }],\r\n                    })(<Input />)}\r\n                </Form.Item>\r\n                <Form.Item label=\"Habitual Residence\">\r\n                    {getFieldDecorator('residence', {\r\n                        initialValue: ['zhejiang', 'hangzhou', 'xihu'],\r\n                        rules: [\r\n                            { type: 'array', required: true, message: 'Please select your habitual residence!' },\r\n                        ],\r\n                    })(<Cascader options={residences} />)}\r\n                </Form.Item>\r\n                <Form.Item label=\"Phone Number\">\r\n                    {getFieldDecorator('phone', {\r\n                        rules: [{ required: true, message: 'Please input your phone number!' }],\r\n                    })(<Input addonBefore={prefixSelector} style={{ width: '100%' }} />)}\r\n                </Form.Item>\r\n                <Form.Item label=\"Website\">\r\n                    {getFieldDecorator('website', {\r\n                        rules: [{ required: true, message: 'Please input website!' }],\r\n                    })(\r\n                        <AutoComplete\r\n                            dataSource={websiteOptions}\r\n                            onChange={this.handleWebsiteChange}\r\n                            placeholder=\"website\"\r\n                        >\r\n                            <Input />\r\n                        </AutoComplete>,\r\n                    )}\r\n                </Form.Item>\r\n                <Form.Item label=\"Captcha\" extra=\"We must make sure that your are a human.\">\r\n                    <Row gutter={8}>\r\n                        <Col span={12}>\r\n                            {getFieldDecorator('captcha', {\r\n                                rules: [{ required: true, message: 'Please input the captcha you got!' }],\r\n                            })(<Input />)}\r\n                        </Col>\r\n                        <Col span={12}>\r\n                            <Button>Get captcha</Button>\r\n                        </Col>\r\n                    </Row>\r\n                </Form.Item>\r\n                <Form.Item {...tailFormItemLayout}>\r\n                    {getFieldDecorator('agreement', {\r\n                        valuePropName: 'checked',\r\n                    })(\r\n                        <Checkbox>\r\n                            I have read the <a href=\"\">agreement</a>\r\n                        </Checkbox>,\r\n                    )}\r\n                </Form.Item>\r\n                <Form.Item {...tailFormItemLayout}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Register\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\n// const WrappedRegistrationForm = Form.create({ name: 'register' })(RegistrationForm);\r\n//\r\n// ReactDOM.render(<WrappedRegistrationForm />, document.getElementById('container'));\r\nexport default RegistrationForm;\r\n"]},"metadata":{},"sourceType":"module"}